[{"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/App.js":"1","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/index.js":"2","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/reportWebVitals.js":"3","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/Main.js":"4","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/header/Header.js":"5","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/display/Display.js":"6","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/container/Container.js":"7","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/container/button/Button.js":"8","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/slider/Slider.js":"9","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/checkbox/Checkbox.js":"10","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/ultils/Helper.js":"11","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/tooltip/Tooltip.js":"12"},{"size":209,"mtime":1608121178250,"results":"13","hashOfConfig":"14"},{"size":549,"mtime":1608119258097,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608118333558,"results":"16","hashOfConfig":"17"},{"size":220,"mtime":1608126758586,"results":"18","hashOfConfig":"14"},{"size":376,"mtime":1608122423035,"results":"19","hashOfConfig":"14"},{"size":3955,"mtime":1610378924833,"results":"20","hashOfConfig":"14"},{"size":6459,"mtime":1610378803735,"results":"21","hashOfConfig":"17"},{"size":475,"mtime":1608127662032,"results":"22","hashOfConfig":"14"},{"size":1733,"mtime":1608217746369,"results":"23","hashOfConfig":"17"},{"size":958,"mtime":1608212873716,"results":"24","hashOfConfig":"14"},{"size":1569,"mtime":1610359102786,"results":"25","hashOfConfig":"14"},{"size":520,"mtime":1610378762566,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d9618i",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5gahyj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/App.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/index.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/reportWebVitals.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/Main.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/header/Header.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/display/Display.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/container/Container.js",["52","53"],"import React, {useState, useEffect, useMemo} from 'react';\nimport Checkbox from '../checkbox/Checkbox';\nimport Slider from '../slider/Slider';\nimport Button from './button/Button';\nimport './Container.css';\nimport {\n  generatePassword,\n  setPasswordLength,\n  copyToClipBoard,\n} from '../../ultils/Helper';\nimport Tooltip from '../tooltip/Tooltip';\n\nconst CHECKBOX_LIST = [\n  {\n    id: 0,\n    name: 'uppercase',\n    label: 'Uppercase',\n    isChecked: true,\n  },\n  {\n    id: 1,\n    name: 'lowercase',\n    label: 'Lowercase',\n    isChecked: true,\n  },\n  {\n    id: 2,\n    name: 'symbols',\n    label: 'Symbols',\n    isChecked: true,\n  },\n  {\n    id: 3,\n    name: 'numbers',\n    label: 'Numbers',\n    isChecked: true,\n  },\n];\n\nconst Container = ({\n  setPassword,\n  setRange,\n  setPasswordProps,\n  passwordRef,\n  type,\n}) => {\n  const [rangeValue, setRangeValue] = useState('8');\n  const [checkbox, setCheckbox] = useState({\n    uppercase: true,\n    lowercase: true,\n    symbols: true,\n    numbers: true,\n  });\n  const [checked, setChecked] = useState(false);\n  const [checkedName, setCheckedName] = useState('');\n  const [tooltip, setTooltip] = useState();\n  const [minMaxValue, setMinMaxValue] = useState({\n    min: 1,\n    max: 60,\n  });\n\n  const {uppercase, lowercase, symbols, numbers} = checkbox;\n  const {min, max} = minMaxValue;\n\n  const geRangeValues = (value) => {\n    setPasswordLength(value);\n    setRange(value);\n    setRangeValue(value);\n  };\n\n  useEffect(() => {\n    geRangeValues(rangeValue);\n    passwordGenerated(checkbox, rangeValue);\n    checkboxCount();\n\n    // eslint-disable-next-line\n  }, [uppercase, lowercase, symbols, numbers]);\n\n  const checkboxCount = () => {\n    const checkedCount = Object.keys(checkbox).filter((key) => checkbox[key]);\n    const disabled = checkedCount.length === 1;\n    const name = checkedCount[0];\n    if (disabled) {\n      setChecked(disabled);\n      setCheckedName(name);\n    } else {\n      setChecked(false);\n      setCheckedName('name');\n    }\n  };\n\n  const passwordGenerated = (checkbox, rangeValue) => {\n    const pwd =\n      rangeValue > 3\n        ? generatePassword(checkbox, rangeValue)\n        : generatePassword(checkbox, 3);\n    setPassword(pwd); //SetPasswrod is Proptypes from Container i will use this value in Display\n    setPasswordProps(checkbox); //setPasswordProps to checkbox value for use in display\n    console.log(pwd);\n  };\n\n  const onChangeSlider = (e) => {\n    // console.log(e.target.value);\n    geRangeValues(e.target.value);\n    passwordGenerated(checkbox, e.target.value);\n  };\n\n  const onChangeCheckBox = (e) => {\n    if (type !== 'pin') {\n      let {name, checked} = e.target;\n      CHECKBOX_LIST.map((checkbox) => {\n        if (checkbox.name === name) {\n          checkbox.isChecked = checked;\n          setCheckbox((prevState) => ({\n            ...prevState,\n            [name]: checkbox.isChecked,\n          }));\n          setPasswordLength(rangeValue);\n          setRangeValue(rangeValue);\n        }\n        return '';\n      });\n    }\n\n    //console.log(CHECKBOX_LIST);\n    //console.log(checkbox, name);\n  };\n\n  const copyClipBoard = (elementRef) => (e) => {\n    e.preventDefault();\n    copyToClipBoard(elementRef);\n    setTooltip(true);\n    setTimeout(() => {\n      setTooltip(false);\n    }, 2000);\n  };\n\n  const updateCheckBoxes = () => {\n    if (type === 'pin') {\n      CHECKBOX_LIST.map((checkbox) => {\n        const name = checkbox.name;\n        if (name !== 'numbers') {\n          checkbox.isChecked = false;\n          const checkboxProps = {\n            name: name,\n            checkedName: name,\n            checked: true,\n            isChecked: checkbox.isChecked,\n            min: 0,\n            max: 15,\n            length: 3,\n          };\n          checkBoxProperties(checkboxProps);\n        }\n        return '';\n      });\n    } else {\n      CHECKBOX_LIST.map((checkbox) => {\n        const name = checkbox.name;\n        checkbox.isChecked = true;\n        const checkboxProps = {\n          name,\n          checkedName: '',\n          checked: false,\n          isChecked: checkbox.isChecked,\n          min: 1,\n          max: 60,\n          length: 12,\n        };\n        checkBoxProperties(checkboxProps);\n      });\n    }\n  };\n\n  const checkBoxProperties = (checkBoxProps) => {\n    const {\n      name,\n      checked,\n      isChecked,\n      checkedName,\n      min,\n      max,\n      length,\n    } = checkBoxProps;\n    setCheckbox((prevState) => ({\n      ...prevState,\n      [name]: isChecked,\n    }));\n    setChecked(checked);\n    setCheckedName(checkedName);\n    setPasswordLength(length);\n    setMinMaxValue({min, max});\n    setRangeValue(length);\n    setRange(length);\n  };\n\n  useMemo(updateCheckBoxes, [type]);\n\n  const SliderProps = {\n    step: 1,\n    min: parseInt(min, 10),\n    max: parseInt(max, 10),\n    value: parseInt(rangeValue, 10),\n    onChangeValue: onChangeSlider,\n    defaultLength: parseInt(rangeValue, 10),\n  };\n  return (\n    <div className=' password-settings'>\n      <h3>Use the Slider, and select from the options.</h3>\n\n      <div className='row' style={{display: 'block'}}>\n        <div\n          className='col-md-12'\n          style={{position: 'relative', overflow: 'overlay'}}>\n          <div className='form-group'>\n            <br />\n            <Slider {...SliderProps} />\n          </div>\n        </div>\n\n        <div className='col-md-12'>\n          <div className='row checkbox-container'>\n            {CHECKBOX_LIST.map((checkbox) => (\n              <Checkbox\n                key={checkbox.id}\n                name={checkbox.name}\n                checked={checkbox.isChecked}\n                value={checkbox.isChecked}\n                label={checkbox.label}\n                onChange={onChangeCheckBox}\n                disabled={\n                  checked && checkbox.isChecked && checkedName === checkbox.name\n                }\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className='text-center'>\n        <div className='row'>\n          <div className='col-md-12'>\n            <br />\n            <Button\n              label='Copy Password'\n              className='btn password-btn'\n              handleClick={copyClipBoard(passwordRef.current)}\n            />\n            <Tooltip\n              message='Copied'\n              position='right'\n              displayTooltip={tooltip}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/container/button/Button.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/slider/Slider.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/checkbox/Checkbox.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/ultils/Helper.js",[],"/Users/juliana.leon/Documents/REACTJS_COURSE/password-generator/src/components/tooltip/Tooltip.js",[],{"ruleId":"54","severity":1,"message":"55","line":158,"column":36,"nodeType":"56","messageId":"57","endLine":158,"endColumn":38},{"ruleId":"58","severity":1,"message":"59","line":197,"column":29,"nodeType":"60","endLine":197,"endColumn":35,"suggestions":"61"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'checkBoxProperties'. Either include it or remove the dependency array.","ArrayExpression",["62"],{"desc":"63","fix":"64"},"Update the dependencies array to be: [checkBoxProperties, type]",{"range":"65","text":"66"},[4694,4700],"[checkBoxProperties, type]"]